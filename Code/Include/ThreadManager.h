///////////////////////////////////////////////////////////
// NOTE: This class has been architected to follow the
// principles of the SINGLETON DESIGN PATTERN.
///////////////////////////////////////////////////////////

#ifndef THREAD_MANAGER_H
#define THREAD_MANAGER_H

#include "Global.h"
#include "Base.h"

class ThreadManager : public Base
{
	public:
		///////////////////////////////////////////////////////////
		// TYPE: Method 
		//  
		// METHOD NAME: GetInstance
		//
		/// DESCRIPTION: Returns the address to the only instance
		/// of the class. If the class has not yet been
		/// instantiated, it will do so.
		///////////////////////////////////////////////////////////
		static ThreadManager* getInstance();

		///////////////////////////////////////////////////////////
		// TYPE: Method 
		//  
		// METHOD NAME: ~ThreadManager
		//
		/// DESCRIPTION: Class destructor
		///////////////////////////////////////////////////////////
		~ThreadManager();

		///////////////////////////////////////////////////////////
		// TYPE: Method 
		//  
		// METHOD NAME: StartAllThreads
		//
		/// DESCRIPTION: Starts all RTSC threads.
		///////////////////////////////////////////////////////////
		void StartAllThreads();

	private:
		///////////////////////////////////////////////////////////
		// TYPE: Method 
		//  
		// METHOD NAME: Base
		//
		/// DESCRIPTION: Default constructor
		///////////////////////////////////////////////////////////
		ThreadManager();

		///////////////////////////////////////////////////////////
		// TYPE: Singleton Pointer
		//
		/// DESCRIPTION: The pointer holding the address of the
		/// only instance of the class.
		///////////////////////////////////////////////////////////
		static ThreadManager* threadManagerInstance;
};

#endif